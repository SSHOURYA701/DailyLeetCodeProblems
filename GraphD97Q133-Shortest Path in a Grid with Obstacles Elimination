#https://leetcode.com/problems/shortest-path-in-a-grid-with-obstacles-elimination/

class Solution:
    def shortestPath(self, grid: List[List[int]], k: int) -> int:
        
        if len(grid) == 1 and len(grid[0])==1:
            return 0
        
        #row,col,#change remaining,steps
        queue = deque([(0,0,k,0)])
        visited = set([(0,0,k)])
        
        if k >(len(grid)-1 +len(grid[0])-1):
               return (len(grid)-1 +len(grid[0])-1)

        while queue:
            #take the current 
            row, col, eliminate, steps = queue.popleft()
            
            #check in neighbours
            for new_row, new_col in [(row-1,col), (row,col+1), (row+1, col), (row, col-1)]:
                if (new_row >= 0 and new_row < len(grid) and new_col >= 0 and new_col < len(grid[0])):
                       
                       #check if we have an obstackle and if we can remove it or not and after removing if we havnt seen the same or not
                    if grid[new_row][new_col] == 1 and eliminate > 0 and (new_row, new_col, eliminate-1) not in visited:
                       #add in visited 
                        visited.add((new_row, new_col, eliminate-1))
                       #append in Q
                        queue.append((new_row, new_col, eliminate-1, steps+1))
                    #if we have a path then we just check if its 0 and if row,col,$remomaingsteps we have seen in visited
                    if grid[new_row][new_col] == 0 and (new_row, new_col, eliminate) not in visited:
                       #destination reached
                        if new_row == len(grid)-1 and new_col == len(grid[0])-1:
                            return steps+1
                        #else add the same
                        visited.add((new_row, new_col, eliminate))
                        queue.append((new_row, new_col, eliminate, steps+1))

        return -1
