#https://leetcode.com/problems/linked-list-cycle-ii/

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def detectCycle(self, head: Optional[ListNode]) -> Optional[ListNode]:
        
        #1st logic is to detect a list
        if head == None or head.next==None:
            return None
       
        slow,fast = head,head
        while True:
            slow = slow.next
            fast = fast.next.next
            
            if slow == fast:
                break
            elif slow.next == None or fast.next==None or fast.next.next == None:
                return None
        
        #If there is a cycle then
        slow = head
        while slow !=fast:
            slow = slow.next
            fast = fast.next
            
        return slow
            
            
