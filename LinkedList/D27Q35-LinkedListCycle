#https://leetcode.com/problems/linked-list-cycle/

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution:
    def hasCycle(self, head: Optional[ListNode]) -> bool:
        
        if head == None or head.next==None:
            return False
        slow,fast = head,head
        
        while True:
            slow = slow.next
            fast = fast.next.next
            
            if slow == fast:
                return True
            elif slow.next == None or fast.next==None or fast.next.next == None:
                return False
            
        
        
