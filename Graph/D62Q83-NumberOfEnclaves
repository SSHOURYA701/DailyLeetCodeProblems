#https://leetcode.com/problems/number-of-enclaves/

class Solution:
    def numEnclaves(self, grid: List[List[int]]) -> int:
        
        rows,cols = len(grid),len(grid[0])
        answer = 0
        for row in range(rows):
            for col in range(cols):
                if grid[row][col] == 1:
                    currStatus = self.dfs(row,col,rows,cols,grid)
                    if currStatus[0] == True:
                        answer+=currStatus[1]
        
        return answer
    
    def dfs(self,row,col,rows,cols,grid):
        if (row ==0) or (col==0) or (row == rows-1) or (col ==cols-1):
            return [False,0]
        
        grid[row][col] = 0
        
        up = down = left =right = [True,0]
        
        #up
        if col-1>=0 and grid[row][col-1] == 1:
            up = self.dfs(row,col-1,rows,cols,grid)
        
        #down
        if col+1<cols and grid[row][col+1] == 1:
            down = self.dfs(row,col+1,rows,cols,grid)
            
        #left
        if row-1>=0 and grid[row-1][col] == 1:
            left = self.dfs(row-1,col,rows,cols,grid)
            
        #rright
        if row+1<rows and grid[row+1][col] == 1:
            right = self.dfs(row+1,col,rows,cols,grid)
        
        flag = True and up[0] and down[0] and left[0] and right[0]
        
        if flag == True:
            return [True,1 + up[1] + down[1] + left[1] + right[1]]
        else:
            return [False,0]
        
    
