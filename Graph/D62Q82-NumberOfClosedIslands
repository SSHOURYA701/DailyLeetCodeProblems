#https://leetcode.com/problems/number-of-closed-islands/

class Solution:
    def closedIsland(self, grid: List[List[int]]) -> int:
        
        rows,cols=len(grid),len(grid[0])
        
        # vis = [[0 for i in range(cols)] for i in range(rows)]
        
        answer = 0
        for row in range(rows):
            for col in range(cols):
                if grid[row][col] == 0:
                    flag = self.dfs(row,col,rows,cols,grid)
                    # print(flag)
                    if flag == True:
                        print
                        answer+=1
                
        return answer
    
    def dfs(self,row,col,rows,cols,grid):
        
        if (row == 0) or (row ==rows-1) or (col ==0) or (col == cols-1):
            return False
        #this condition needs to be below the base case
        grid[row][col] = 2
        
        up,down,left,right = True , True,True,True
        #Up
        if col-1>=0 and grid[row][col-1] == 0:
            up=self.dfs(row,col-1,rows,cols,grid)
        
        #Down
        if col+1<cols and grid[row][col+1] == 0:
            down=self.dfs(row,col+1,rows,cols,grid)
            
        #Left
        if row-1>=0 and grid[row-1][col] == 0:
            left=self.dfs(row-1,col,rows,cols,grid)
            
        #Right
        if row+1>0 and grid[row+1][col] == 0:
            right=self.dfs(row+1,col,rows,cols,grid)
            
            
        return True and up and down and left and right
