#https://leetcode.com/problems/number-of-longest-increasing-subsequence/
class Solution:
    def findNumberOfLIS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        if not nums:
            return 0
        dp1,dp2 = [1]* len(nums),[1]*len(nums)
        count,maxval=1,1
        for i in range(1,len(nums)):
            for j in range(i):
                if nums[i]>nums[j]:
                    if dp1[j]+1>dp1[i]:
                        dp1[i],dp2[i]=dp1[j]+1,dp2[j]
                    elif dp1[j]+1==dp1[i]:
                        dp2[i]+=dp2[j]

            if dp1[i]>maxval:
                maxval,count=dp1[i],dp2[i]
            elif dp1[i]==maxval:
                count+=dp2[i]

        return count
        #MY CODE
#     def findNumberOfLIS(self, nums: List[int]) -> int:
#         if not nums:
#             return 0
        
#         n = len(nums)
#         #count the number of LISs
#         count=[1 for i in range(n)]
        
#         dp = [1 for i in range(n)]
#         maxi = 1
#         answer = 1
#         for curr in range(1,n):
#             for prev in range(n):
#                 if (nums[prev]<nums[curr]) and (1+dp[prev] > dp[curr]):
#                     dp[curr] = 1 + dp[prev]
#                     #if found a new LIS we store as prev
#                     count[curr] = count[prev]
#                 #if we are getting same LISs then add the prev LISs also
#                 elif (nums[prev]<nums[curr]) and (1+dp[prev] == dp[curr]):
#                     count[curr] +=count[prev]
            
#             if dp[curr] > maxi:
#                 maxi=dp[curr]
#                 answer = count[curr]
#             elif dp[curr] == maxi:
#                 answer +=count[curr]
    
        
#         return answer
        
