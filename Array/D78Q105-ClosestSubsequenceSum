#https://leetcode.com/problems/closest-subsequence-sum/

class Solution:
    def minAbsDifference(self, nums: List[int], goal: int) -> int:
                # function that generates all possible sums of sebsequences
        def dfs(i,cur,arr,sums):
            if i==len(arr):
                sums.add(cur)
                return
            dfs(i+1,cur,arr,sums)
            dfs(i+1,cur+arr[i],arr,sums)
        
        sums1,sums2=set(),set()
        # generate all possible sums of the 1st and 2nd half 
        dfs(0,0,nums[:len(nums)//2],sums1)
        dfs(0,0,nums[len(nums)//2:],sums2)
        
        # sort the possible sums of the 2nd half
        s2=sorted(sums2)
        ans=10**10
        # for each possible sum of the 1st half, find the sum in the 2nd half
        # that gives a value closest to the goal using binary search
        for s in sums1:
            remain=goal-s
			# binary search for the value in s2 that's closest to the remaining value
            i2=bisect_left(s2,remain)
            if i2<len(s2):
                ans=min(ans,abs(remain-s2[i2]))
            if i2>0:
                ans=min(ans,abs(remain-s2[i2-1]))
        return ans
    
#DP with TLE
#     mini = float('inf')
#     def minAbsDifference(self, nums: List[int], goal: int) -> int:
        
#         dp = dict()
#         self.util(0,0,nums,goal,dp)
        
#         return self.mini
    
#     def util(self,index,currSum,nums,goal,dp):
        
#         if index == len(nums)-1:
            
#             if abs(currSum + nums[index] - goal) < self.mini:
#                 self.mini = abs((currSum + nums[index])-goal)
#                 dp[(index,currSum + nums[index])] = self.mini
#             if abs(currSum - goal) < self.mini:
#                 self.mini = abs(currSum - goal)
#                 dp[(index,currSum)] = self.mini

#             return
#         if (index,currSum) in dp.keys():
#             return dp[(index,currSum)]
        
#         #Pick the current element in sequence
#         self.util(index+1,currSum + nums[index],nums,goal,dp)
        
#         #not pick the current element
#         self.util(index+1,currSum,nums,goal,dp)
        
#         dp[(index,currSum)] = self.mini             
