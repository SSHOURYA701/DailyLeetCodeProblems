#https://leetcode.com/problems/jump-game/submissions/
#Memoization
class Solution:
    def canJump(self, nums: List[int]) -> bool:
        
        dp = [-1 for i in range(len(nums))]
        answer = self.util(0,nums,dp)
        
        return answer
    
    def util(self,currIndex,nums,dp):
        
        if currIndex == len(nums)-1:
            return True
        if currIndex > len(nums)-1:
            return False
        
        if dp[currIndex]!=-1:
            return dp[currIndex]
        
        boolFlag = False
        #explore all possible jumps
        for i in range(1,nums[currIndex]+1):
            exploreFlag = self.util(currIndex+i,nums,dp)
            boolFlag = boolFlag or exploreFlag
            
        dp[currIndex] = boolFlag
        
        return dp[currIndex]
        
#O(n)
class Solution:
    def canJump(self, nums: List[int]) -> bool:
        
        furthest_can_go = 0
        
        for i in range(len(nums)):
            if i>furthest_can_go:
                break
            furthest_can_go = max(furthest_can_go,i+nums[i])
            
        return furthest_can_go >= (len(nums)-1)
