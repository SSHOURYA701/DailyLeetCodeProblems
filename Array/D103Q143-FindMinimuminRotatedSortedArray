#https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/submissions/

class Solution:
    def findMin(self, nums: List[int]) -> int:
        
        if len(nums)==1:
            return nums[0]
        
        left,right = 0,len(nums)-1
        
        #check for sorted array:
        if nums[0] < nums[right]:
            return nums[0]
        
        # minTillNow = float('inf')
        while left <= right:
            
            mid = left+(right-left)//2
            print(nums[left],nums[mid],nums[right])
            #base conditions:
            if nums[mid] > nums[mid+1]:
                return nums[mid+1]
            if nums[mid-1] > nums[mid]:
                return nums[mid]
            
            # left is striclty increasing so we need to check in the right for inflection point
            if nums[mid] > nums[left]:
                left = mid+1
            else: 
                right = mid - 1

