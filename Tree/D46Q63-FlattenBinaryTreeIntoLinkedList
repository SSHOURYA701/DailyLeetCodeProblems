#https://leetcode.com/problems/flatten-binary-tree-to-linked-list/

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def flatten(self, root: Optional[TreeNode]) -> None:
        """
        Do not return anything, modify root in-place instead.
        """
        #To store the Pre Order Traversal
        
        if root == None: 
            return root
        result = []
        
        self.utilFlatten(root,result,0)
        
        tempHead = result[0]
        
        for index in range(0,len(result)):
            result[index].left = None
            
            if index !=len(result)-1:
                result[index].right = result[index+1]
            else:
                result[index].right = None
                
        root = tempHead
        
    def utilFlatten(self,root,result,currLevel):
        
        if root == None:
            return
        
        result.append(root)
        
        self.utilFlatten(root.left,result,currLevel+1)
        self.utilFlatten(root.right,result,currLevel+1)
        


        
        
