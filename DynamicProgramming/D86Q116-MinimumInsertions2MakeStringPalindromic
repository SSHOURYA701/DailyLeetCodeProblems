#https://leetcode.com/problems/minimum-insertion-steps-to-make-a-string-palindrome/

class Solution:
    def minInsertions(self, s: str) -> int:
        
        def lcs(s: str, r: str) -> int:
            n = len(r)
            dp = [[0] * (n + 1) for _ in range(n + 1)]
            for i, a in enumerate(s):
                for j, b in enumerate(r):
                    dp[i + 1][j + 1] = dp[i][j] + 1 if a == b else max(dp[i][j + 1], dp[i + 1][j])
            return dp[n][n]
        
        return len(s) - lcs(s, s[::-1])
        
