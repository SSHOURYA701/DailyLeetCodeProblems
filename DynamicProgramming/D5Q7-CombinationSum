#https://leetcode.com/problems/combination-sum/

def findCombinations(index: int,tempList: List[int],mainList: List[List[int]],candidates: List[int],target: int) -> List[List[int]]:

    if index == len(candidates):
        if target == 0:
            mainList.append(tempList.copy())  
           
        return

    # Will pick the current index element again
    if target >= candidates[index]:
        tempList.append(candidates[index])
        findCombinations(index,tempList,mainList,candidates,target-candidates[index])
        tempList.pop()


    # Not picking the current element
    findCombinations(index+1,tempList,mainList,candidates,target)

class Solution:
    def combinationSum(self, candidates: List[int], target: int) -> List[List[int]]:
        index,mainList = 0,[]
        findCombinations(index,[],mainList,candidates,target)
                                                               
        return mainList                   
                                                               
                                                               
                                                               
