#https://leetcode.com/problems/find-good-days-to-rob-the-bank/

class Solution:
    def goodDaysToRobBank(self, A: List[int], t: int) -> List[int]:
        
        if t == 0: return list(range(len(A)))
        
        leftDays, rightDays, n = [1], [1], len(A)

        # Build non-increasing on the left side (inclusive).
        curr = 1
        for i in range(1, n):
            #if current is smaller than prev then non increasing is in coninuation
            if A[i] <= A[i - 1]: curr += 1
            #found a day with greater number of guards
            else: curr = 1
            leftDays.append(curr)

        # Build non-decreasing on the right side (inclusive).
        curr = 1
        for i in range(n - 2, -1, -1):
            if A[i] <= A[i + 1]: curr += 1
            else: curr = 1
            rightDays.append(curr)
        rightDays.reverse()
        
        #just iterate over the leftDays and rightDays and use the left prefix and right prefix to find the good day to rob a bank in 1 go
        answer = [i for i in range(n) if leftDays[i] >= t + 1 and rightDays[i] >= t + 1]
        
        return answer
            
        
        
        
#TLE SOLUTION      
#         answer =[]
#         #iterate all the days
#         for currDay in range(1,len(security)-1):
            
#             tempTime = time
            
#             leftDay,rightDay = currDay-1,currDay+1
            
#             #search on left Days
#             while (leftDay >=0) and (security[leftDay] >= security[leftDay+1]):
#                 leftDay-=1
#                 tempTime -=1
#                 #we have seen till time days left
#                 if tempTime ==0:
#                     break
#             # print(currDay,tempTime)
            
#             if tempTime !=0:
#                 continue
            
#             #reset the time for rightDays
#             tempTime = time
            
#             #search in leftDays
#             while (rightDay <=len(security)-1) and (security[rightDay] >= security[rightDay-1]):
#                 rightDay+=1
#                 tempTime -=1
#                 # we have seen till time days to the right
#                 if tempTime ==0:
#                     break
            
#             # print(currDay,tempTime)
#             if tempTime ==0:
#                 answer.append(currDay)
#         return answer
                
            
            
            
