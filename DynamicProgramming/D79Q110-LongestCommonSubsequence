#https://leetcode.com/problems/longest-common-subsequence/

class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        
        answer = 0
        
        if len(text1) <= len(text2):
            dp = [[-1 for i in range(len(text1))]for i in range(len(text2))]
            answer = self.util(0,0,text1,text2,dp)
        else:
            dp = [[-1 for i in range(len(text2))]for i in range(len(text1))]
            answer = self.util(0,0,text2,text1,dp)
        
        return answer
            
    def util(self,i,j,text1,text2,dp):
        
        if i == len(text1)-1:
            #checking if the last element of text1 is present in the remaining text2
            if text1[i] in text2[j:]:
                return 1
            else:
                # print(22)
                return 0
        elif j == len(text2)-1:
            #checking if the last element of text1 is present in the remaining text2
            if text2[j] in text1[i:]:
                return 1
            else:
                return 0
        
        if dp[i][j] != -1:
            return dp[i][j]
        
        same,notSame = 0,0
        
        if text1[i] == text2[j]:
            same = 1 + self.util(i+1,j+1,text1,text2,dp)
        else:
            notSame1 = self.util(i,j+1,text1,text2,dp)
            notSame2 = self.util(i+1,j+1,text1,text2,dp)
            notSame3 = self.util(i+1,j,text1,text2,dp)
            notSame = max(notSame1,max(notSame2,notSame3))
        
        dp[i][j] = max(same,notSame)
        return dp[i][j]
